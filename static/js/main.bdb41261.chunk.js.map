{"version":3,"sources":["components/Header.js","components/Error.js","components/Formulario.js","components/Clima.js","App.js","serviceWorker.js","index.js"],"names":["Header","titulo","className","href","Error","mensaje","Formulario","busqueda","setBusqueda","setConsultar","useState","error","setError","ciudad","pais","handleChange","e","target","name","value","onSubmit","preventDefault","trim","type","id","onChange","htmlFor","Clima","resultado","main","parseFloat","temp","toFixed","temp_max","temp_min","App","componente","consultar","setResultado","useEffect","a","url","fetch","respuesta","json","cod","consultarAPI","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.bdb41261.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Header = ({ titulo }) => {\r\n  return (\r\n    <nav>\r\n      <div className=\"nav-wrapper light-blue darken-2 brand-logo\">\r\n        <a href=\"#!\">{titulo}</a>\r\n      </div>\r\n    </nav>\r\n  );\r\n};\r\n\r\nHeader.propTypes = {\r\n  titulo: PropTypes.string.isRequired\r\n}\r\n\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Error = ({mensaje}) => {\r\n    return ( \r\n    <p className=\"red darken-4 error\">{mensaje}</p>\r\n    );\r\n}\r\n \r\nError.propTypes = {\r\n    mensaje: PropTypes.string.isRequired\r\n}\r\n \r\n\r\nexport default Error;","import React, {useState} from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport Error from \"./Error\";\r\n\r\n\r\nconst Formulario = ({busqueda, setBusqueda, setConsultar}) => {\r\n\r\n \r\n    const [error, setError] = useState(false)\r\n    //extraer ciudad y pais\r\n    const {ciudad, pais} = busqueda;\r\n\r\n    // funcion que coloca los elementos en el state\r\n    const handleChange = e =>{\r\n        //actualizar el state\r\n        setBusqueda({\r\n            ...busqueda,\r\n            [e.target.name] : e.target.value\r\n        });\r\n    }\r\n\r\n        //cuando el usuario da submit al form\r\n        const handleSubmit = e=>{\r\n            e.preventDefault();\r\n\r\n            //validar\r\n            if(ciudad.trim() ==='' || pais.trim() === '' ){\r\n                setError(true);\r\n                return;\r\n            }\r\n\r\n            setError(false);\r\n\r\n            setConsultar(true);\r\n\r\n        }\r\n  return (\r\n    <form \r\n     onSubmit={handleSubmit}>\r\n         {error ? <Error mensaje=\"Ambos campos son obligatorios\"/> : null}\r\n      <div className=\"input-field col s12\">\r\n        <input type=\"text\" \r\n        name=\"ciudad\" \r\n        id=\"ciudad\" \r\n        value={ciudad}\r\n        onChange={handleChange}/>\r\n\r\n        <label htmlFor=\"ciudad\">Ciudad: </label>\r\n      </div>\r\n\r\n      <div className=\"input-field col s12\">\r\n        <select name=\"pais\"\r\n        id=\"pais\"\r\n        value={pais}\r\n        onChange={handleChange}>\r\n          <option value=\"\">--Seleccione un País--</option>\r\n          <option value=\"US\">Estados Unidos</option>\r\n          <option value=\"MX\">México</option>\r\n          <option value=\"AR\">Argentina</option>\r\n          <option value=\"CO\">Colombia</option>\r\n          <option value=\"CR\">Costa Rica</option>\r\n          <option value=\"ES\">España</option>\r\n          <option value=\"PE\">Perú</option>\r\n        </select>\r\n        <label htmlFor=\"pais\">País: </label>\r\n      </div>\r\n\r\n        <div className=\"input-field col s12\">\r\n            <input className=\"waves-effect waves-light btn-large btn-block yellow accent-4\"\r\n            type=\"submit\"\r\n            value=\"Buscar Clima\"\r\n            ></input>\r\n        </div>\r\n\r\n    </form>\r\n  );\r\n};\r\n\r\nFormulario.propTypes = {\r\n  busqueda: PropTypes.object.isRequired,\r\n  setBusqueda: PropTypes.func.isRequired,\r\n  setConsultar: PropTypes.func.isRequired\r\n}\r\n\r\n\r\nexport default Formulario;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nconst Clima = ({resultado}) => {\r\n // extraer los valores\r\n const {name, main} = resultado;\r\n if(!name) return null;\r\n\r\n const kelvin = 273.15;\r\n\r\n    return (<div \r\n    className=\"card-panel white col s12\">\r\n        <div className=\"black-text\">\r\n            <h2>El clima de {name} es: </h2>\r\n            <p className=\"temperatura\">\r\n                {parseFloat(main.temp - kelvin,10).toFixed(2)}<span>&#x2103;</span>\r\n            </p>\r\n            <p>Temperatura Máxima:\r\n                {parseFloat(main.temp_max - kelvin,10).toFixed(2)}<span>&#x2103;</span>\r\n            </p>\r\n            <p>Temperatura Minima:\r\n                {parseFloat(main.temp_min - kelvin,10).toFixed(2)}<span>&#x2103;</span>\r\n            </p>\r\n\r\n        </div>\r\n\r\n    </div>);\r\n}\r\n\r\nClima.propTypes = {\r\n    resultado: PropTypes.object.isRequired\r\n}\r\n \r\nexport default Clima;","import React, { Fragment, useState, useEffect } from \"react\";\nimport Header from \"./components/Header\";\nimport Formulario from \"./components/Formulario\";\nimport Clima from \"./components/Clima\";\nimport Error from \"./components/Error\";\n\nfunction App() {\n  const [busqueda, setBusqueda] = useState({\n    ciudad: \"\",\n    pais: \"\",\n  });\n\n  const [consultar, setConsultar] = useState(false);\n\n  const [resultado, setResultado] = useState({});\n  const [error, setError] =useState(false);\n\n  const { ciudad, pais } = busqueda;\n\n  useEffect(() => {\n    const consultarAPI = async () => {\n      if (consultar) {\n        const appId = \"638b5db147048c24ecb8f7b6f6a1d7c7\";\n        const url = `http://api.openweathermap.org/data/2.5/weather?q=${ciudad},${pais}&appid=${appId}`;\n\n        const respuesta = await fetch(url);\n        const resultado = await respuesta.json();\n        setResultado(resultado);\n        setConsultar(false);\n      }\n\n      //Si no encuentra la ciudad\n      if(resultado.cod=== \"404\"){\n        setError(true);\n      }else{\n        setError(false);\n      }\n    };\n    consultarAPI();\n\n    //eslint-disable-next-line\n  }, [consultar]);\n\nlet componente;\nif(error){\n  componente = <Error mensaje=\"No hay resultados\"/>\n}else{\n  componente = <Clima resultado={resultado}/>\n}\n\n  return (\n    <Fragment>\n      <Header titulo=\"Clima React aap\" />\n      <div className=\"contenedor-form\">\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col m6 s12\">\n              <Formulario\n                busqueda={busqueda}\n                setBusqueda={setBusqueda}\n                setConsultar={setConsultar}\n              />\n            </div>\n            <div className=\"col m6 s12\">\n              {componente}\n            </div>\n          </div>\n        </div>\n      </div>\n    </Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}